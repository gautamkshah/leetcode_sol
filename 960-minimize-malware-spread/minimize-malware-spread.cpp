class Solution {
public:
    vector<int> parent, sz;
    int fs(int x) {
        if (parent[x] == x)
            return x;
        return parent[x] = fs(parent[x]);
    }
    void unioni(int x, int y) {
        int a = fs(x);
        int b = fs(y);
        if (a != b) {
            if (sz[a] < sz[b]) {
                swap(a, b);
            }
            parent[b] = a;
            sz[a] += sz[b];
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        parent.resize(n);
        sz.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    unioni(i, j);
                }
            }
        }
        int m = initial.size();
        vector<int> spread(n, 0);
        for (int i = 0; i < m; i++) {
            int x = fs(initial[i]);
            spread[x] += 1;
        }
        int maxi = 0;
        int ans = -1;
        for (int i = 0; i < m; i++) {
            int x = fs(initial[i]);
            if (sz[x] >= maxi && spread[x] == 1) {
                if (sz[x] == maxi) {
                    ans = min(ans, initial[i]);
                } else {
                    ans = initial[i];
                    maxi = sz[x];
                }
            }
        }
        if (ans == -1) {
            ans = n;
            for (int i = 0; i < m; i++) {
                ans = min(ans, initial[i]);
            }
            return ans;
        }
        return ans;
    }
};